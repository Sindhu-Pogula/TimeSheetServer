@model TimeSheet.Models.User

<div class="logout-container">
    <form asp-area="" asp-controller="Account" asp-action="Logout" method="post" id="logoutForm">
        <button type="submit" style="background: none; border: none; cursor: pointer; color: #4CAF50;">
            <i class="fa fa-power-off" aria-hidden="true"></i> Logout
        </button>
    </form>
</div>
<h2>Welcome, @Model.Username</h2>
<p>This is your dashboard, <b>@Model.Username</b>. You are logged in!</p>
<form asp-action="Signup" method="post">
    <div class="form-group">
        <b> <label asp-for="Username" class="control-label">Username:</label></b>
        <span class="form-control-plaintext">@Model.Username</span>
         <input type="hidden" asp-for="Username" />
    </div>

    <div class="form-group">
        <b><label asp-for="Email" class="control-label">Email:</label></b>
        <span class="form-control-plaintext">@Model.Email</span>
        <input type="hidden" asp-for="Email" />
        <span asp-validation-for="Email" class="text-danger"></span>
    </div>

</form>

<div class="date-container">
    <label><b>From Date:</b></label>
    <input type="date" name="fromDate" class="from-date" autocomplete="off" onchange="autoFillToDateAndDays()" />
    <label><b>To Date:</b></label>
    <input type="date" name="toDate" class="to-date" autocomplete="off" readonly />
</div>

<table class="timesheet-table">
    <thead>
        <tr>
            <th>Projects</th>
            <th>Monday</th>
            <th>Tuesday</th>
            <th>Wednesday</th>
            <th>Thursday</th>
            <th>Friday</th>
            <th>Saturday</th>
            <th>Sunday</th>
            <th>Total Hours</th>
        </tr>
    </thead>
    <tbody id="timesheet-body">
        <tr class="timesheet-row">
            <td contenteditable="true" class="project-input"></td>
            <td contenteditable="true" class="hours-input"></td>
            <td contenteditable="true" class="hours-input"></td>
            <td contenteditable="true" class="hours-input"></td>
            <td contenteditable="true" class="hours-input"></td>
            <td contenteditable="true" class="hours-input"></td>
            <td contenteditable="true" class="hours-input"></td>
            <td contenteditable="true" class="hours-input"></td>
            <td class="total-hours"></td>
        </tr>
    </tbody>
</table>
<div class="add-row">
    <button id="addRowButton" class="btn btn-success" onclick="addRow()">Add Row</button>
</div>

<div class="action-buttons">
    <div class="button-container">
        <a href="/Timesheet/History" class="btn btn-primary history-icon">
            <i class="fa fa-history"></i> View Timesheet History
        </a>
    </div>
    <div class="button-container">
        @* <button id="addRowButton" onclick="addRow()">Add Row</button> *@
        <button type="button" class="reset" onclick="resetTable()">Reset</button>
        <button type="button" onclick="submitTimesheet()">Submit</button>
    </div>
</div>

<style>
    body {
        font-family: Arial, sans-serif;
        background-color: #f4f4f4;
        margin: 20px;
    }

    .timesheet-table {
        width: 100%;
        border-collapse: collapse;
        margin: 20px 0;
        font-size: 16px;
        background-color: #fff;
        box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
    }

        .timesheet-table th, .timesheet-table td {
            padding: 12px 15px;
            border: 1px solid #ddd;
            text-align: center;
        }

        .timesheet-table thead tr {
            background-color: #4CAF50;
            color: white;
        }

        .timesheet-table tbody tr:nth-child(even) {
            background-color: #f9f9f9;
        }

        .timesheet-table tbody tr:hover {
            background-color: #f1f1f1;
            cursor: pointer;
        }

    td[contenteditable="true"] {
        background-color: #e9f5e9;
        outline: none;
    }

    .date-container {
        display: flex;
        flex-direction: row;
        justify-content: center;
        align-items: center;
        gap: 10px;
    }

        .date-container label {
            margin-right: 5px;
        }

    .action-buttons {
        margin-top: 20px;
        text-align: right;
        display: flex;
        justify-content: space-between;
    }

    .button-container {
        display: inline-block;
        margin-right: 0px;
    }

        .button-container button {
            background-color: #4CAF50;
            color: white;
            border: none;
            padding: 10px 20px;
            text-align: center;
            font-size: 16px;
            margin: 4px 2px;
            cursor: pointer;
            border-radius: 5px;
        }

            .button-container button.reset {
                background-color: #f44336; /* Red */
            }

    .history-icon i {
        margin-right: 5px;
    }

    .logout-container {
        position: absolute;
        top: 20px;
        right: 20px;
    }

        .logout-container button {
            background-color: transparent;
            border: none;
            cursor: pointer;
            color: #4CAF50;
            font-size: 16px;
            padding: 10px;
        }

            .logout-container button:hover {
                color: #d9534f; /* Change color on hover */
            }
    .add-row{
        display: flex;
        justify-content: right;
    }
    .btn-success{
        background-color: #4CAF50;
        border-color: #4CAF50;
    }
    .btn-success:hover {
        color: #fff;
        background-color: #4CAF50 !important;
        border-color: #146c43;
    }
</style>

<script>
    function autoFillToDateAndDays() {
        const fromDateInput = document.querySelector('.from-date');
        const toDateInput = document.querySelector('.to-date');
        const fromDateValue = new Date(fromDateInput.value);

        if (!isNaN(fromDateValue.getTime())) {
            const toDateValue = new Date(fromDateValue);
            toDateValue.setDate(toDateValue.getDate() + 6); // Set To Date to 6 days later
            toDateInput.value = toDateValue.toISOString().split('T')[0];
        }
    }

    function updateTotalHours(row) {
        let total = 0;

        row.querySelectorAll('td.hours-input').forEach(cell => {
            const value = parseFloat(cell.textContent) || 0;
            total += value;
        });

        row.querySelector('.total-hours').textContent = total.toFixed(2);
    }

    // Initialize event listeners for existing inputs
    function initInputListeners(row) {
        row.querySelectorAll('td.hours-input').forEach(cell => {
            cell.addEventListener('input', function () {
                if (/[^0-9.]/.test(this.textContent)) {
                    alert("Please enter only valid numbers.");
                    this.textContent = this.textContent.replace(/[^0-9.]/g, '');
                }
                updateTotalHours(this.parentElement);
            });
        });
    }

    // Function to handle adding a new row
    function addRow() {
        const newRow = document.createElement('tr');
        newRow.classList.add('timesheet-row');
        newRow.innerHTML = `
                <td contenteditable="true" class="project-input"></td>
                <td contenteditable="true" class="hours-input"></td>
                <td contenteditable="true" class="hours-input"></td>
                <td contenteditable="true" class="hours-input"></td>
                <td contenteditable="true" class="hours-input"></td>
                <td contenteditable="true" class="hours-input"></td>
                <td contenteditable="true" class="hours-input"></td>
                <td contenteditable="true" class="hours-input"></td>
                <td class="total-hours"></td>
            `;

        // Add the new row to the table
        document.getElementById('timesheet-body').appendChild(newRow);

        // Initialize input listeners for the new row
        initInputListeners(newRow);
    }

    // Function to handle timesheet submission
    function submitTimesheet() {
        const rows = document.querySelectorAll('.timesheet-table tbody tr');
        const data = [];

        // Get From Date and To Date
        const fromDate = document.querySelector('.from-date').value;
        const toDate = document.querySelector('.to-date').value;

        if (!fromDate || !toDate) {
            alert('Please select both From Date and To Date.');
            return;  // Exit function if dates are missing
        }

        let isValid = true; // Flag to track if data is valid

        rows.forEach(row => {
            const project = row.cells[0].textContent.trim();

            if (!project) {
                alert('Project name cannot be empty.');
                isValid = false;
                return;  // Exit function for the current row if project is empty
            }

            const hours = [];
            for (let i = 1; i <= 7; i++) {
                const hourValue = parseFloat(row.cells[i].textContent.trim()) || 0;
                if (isNaN(hourValue) || hourValue < 0) {
                    alert('Please enter valid hours.');
                    isValid = false;
                    return;  // Exit function for invalid hour input
                }
                hours.push(hourValue);
            }

            const totalHours = parseFloat(row.querySelector('.total-hours').textContent.trim()) || 0;

            data.push({
                Project: project,
                FromDate: fromDate,
                ToDate: toDate,
                Monday: hours[0],
                Tuesday: hours[1],
                Wednesday: hours[2],
                Thursday: hours[3],
                Friday: hours[4],
                Saturday: hours[5],
                Sunday: hours[6],
                TotalHours: totalHours
            });
        });

        if (!isValid) {
            return;  // Exit if any validation failed
        }

        // Submit data to the server
        fetch('/Timesheet/SaveTimesheet', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(data)
        }).then(response => {
            if (!response.ok) {
                return response.json().then(err => { throw err; }); // Handle 400/500 server errors
            }
            return response.json();  // Parse the JSON response
        }).then(result => {
            alert('Timesheet submitted successfully!');
            resetTable();
        }).catch(error => {
            console.error('Error:', error);
            alert('Failed to submit timesheet. Please try again.');
        });
    }

    function resetTable() {
        document.querySelectorAll('td[contenteditable="true"]').forEach(cell => cell.textContent = '');
        document.querySelectorAll('.total-hours').forEach(cell => cell.textContent = '0.00');
        document.querySelector('.from-date').value = '';
        document.querySelector('.to-date').value = '';
        // Optionally, you can clear all rows if you want
        const rows = document.querySelectorAll('.timesheet-row');
        rows.forEach((row, index) => {
            if (index > 0) row.remove(); // Keep only the first row
        });
        // Re-add a default row if necessary
        addRow();
    }

    // Initialize listeners for the initial row
    initInputListeners(document.querySelector('.timesheet-row'));
</script>

