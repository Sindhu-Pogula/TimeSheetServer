@model TimeSheet.Models.User

<div class="logout-container">
    <form asp-area="" asp-controller="Account" asp-action="Logout" method="post" id="logoutForm">
        <button type="submit" style="background: none; border: none; cursor: pointer; color: #4CAF50;">
            <i class="fa fa-power-off" aria-hidden="true"></i> Logout
        </button>
    </form>
</div>
<h2>Welcome, @Model.Username</h2>
<p>This is your dashboard, <b>@Model.Username</b>. You are logged in!</p>
<form asp-action="Signup" method="post">
    <div class="form-group">
        <b> <label asp-for="Username" class="control-label">Username:</label></b>
        <span class="form-control-plaintext">@Model.Username</span>
        <input type="hidden" asp-for="Username" />
    </div>

    <div class="form-group">
        <b><label asp-for="Email" class="control-label">Email:</label></b>
        <span class="form-control-plaintext">@Model.Email</span>
        <input type="hidden" asp-for="Email" />
        <span asp-validation-for="Email" class="text-danger"></span>
    </div>

</form>

<div class="date-container">
    <label><b>From Date:</b></label>
    <input type="date" name="fromDate" class="from-date" autocomplete="off" onchange="autoFillToDateAndDays()" />
    <label><b>To Date:</b></label>
    <input type="date" name="toDate" class="to-date" autocomplete="off" readonly />
</div>

<table class="timesheet-table">
    <thead>
        <tr>
            <th>Projects</th>
            <th>Monday <br /><span id="monday-date"></span></th>
            <th>Tuesday <br /><span id="tuesday-date"></span></th>
            <th>Wednesday <br /><span id="wednesday-date"></span></th>
            <th>Thursday <br /><span id="thursday-date"></span></th>
            <th>Friday <br /><span id="friday-date"></span></th>
            <th>Saturday <br /><span id="saturday-date"></span></th>
            <th>Sunday <br /><span id="sunday-date"></span></th>
            <th>Total Hours</th>
        </tr>
    </thead>
    <tbody id="timesheet-body">
        <tr class="timesheet-row">
            <td contenteditable="true" class="project-input"></td>
            <td><input type="time" class="hours-input" min="00:00" max="24:00" required /></td>
            <td><input type="time" class="hours-input" min="00:00" max="24:00" required /></td>
            <td><input type="time" class="hours-input" min="00:00" max="24:00" required /></td>
            <td><input type="time" class="hours-input" min="00:00" max="24:00" required /></td>
            <td><input type="time" class="hours-input" min="00:00" max="24:00" required /></td>
            <td><input type="time" class="hours-input" min="00:00" max="24:00" required /></td>
            <td><input type="time" class="hours-input" min="00:00" max="24:00" required /></td>
            <td class="total-hours"></td> <!-- Ensure this class is present -->
        </tr>
    </tbody>
</table>
<div class="add-row">
    <button id="addRowButton" class="btn btn-success" onclick="addRow()">Add Row</button>
</div>

<div class="action-buttons">
    <div class="button-container">
        <a href="/Timesheet/History" class="btn btn-primary history-icon">
            <i class="fa fa-history"></i> View Timesheet History
        </a>
    </div>
    <div class="button-container">
        <button type="button" class="reset" onclick="resetTable()">Reset</button>
        <button type="button" onclick="submitTimesheet()">Submit</button>
    </div>
</div>

<style>
    body {
        font-family: Arial, sans-serif;
        background-color: #f4f4f4;
        margin: 20px;
    }

    .timesheet-table {
        width: 100%;
        border-collapse: collapse;
        margin: 20px 0;
        font-size: 16px;
        background-color: #fff;
        box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
    }

        .timesheet-table th, .timesheet-table td {
            padding: 12px 15px;
            border: 1px solid #ddd;
            text-align: center;
        }

        .timesheet-table thead tr {
            background-color: #4CAF50;
            color: white;
        }

        .timesheet-table tbody tr:nth-child(even) {
            background-color: #f9f9f9;
        }

        .timesheet-table tbody tr:hover {
            background-color: #f1f1f1;
            cursor: pointer;
        }

    td[contenteditable="true"] {
        background-color: #e9f5e9;
        outline: none;
    }

    .date-container {
        display: flex;
        flex-direction: row;
        justify-content: center;
        align-items: center;
        gap: 10px;
    }

        .date-container label {
            margin-right: 5px;
        }

    .action-buttons {
        margin-top: 20px;
        text-align: right;
        display: flex;
        justify-content: space-between;
    }

    .button-container {
        display: inline-block;
        margin-right: 0px;
    }

        .button-container button {
            background-color: #4CAF50;
            color: white;
            border: none;
            padding: 10px 20px;
            text-align: center;
            font-size: 16px;
            margin: 4px 2px;
            cursor: pointer;
            border-radius: 5px;
        }

            .button-container button.reset {
                background-color: #f44336; /* Red */
            }

    .history-icon i {
        margin-right: 5px;
    }

    .logout-container {
        position: absolute;
        top: 20px;
        right: 20px;
    }

        .logout-container button {
            background-color: transparent;
            border: none;
            cursor: pointer;
            color: #4CAF50;
            font-size: 16px;
            padding: 10px;
        }

            .logout-container button:hover {
                color: #d9534f; /* Change color on hover */
            }

    .add-row {
        display: flex;
        justify-content: right;
    }

    .btn-success {
        background-color: #4CAF50;
        border-color: #4CAF50;
    }

        .btn-success:hover {
            color: #fff;
            background-color: #4CAF50 !important;
            border-color: #146c43;
        }

    .hours-input{
        border: none;
        font-family: serif;
    }

    .total-hours{
        font-family: serif;
    }
</style>

<script>
    function autoFillToDateAndDays() {
        const fromDateInput = document.querySelector('.from-date');
        const toDateInput = document.querySelector('.to-date');
        const fromDateValue = new Date(fromDateInput.value);

        if (!isNaN(fromDateValue.getTime())) {
            const toDateValue = new Date(fromDateValue);
            toDateValue.setDate(toDateValue.getDate() + 6); // Set To Date to 6 days later
            toDateInput.value = toDateValue.toISOString().split('T')[0];

            // Calculate and display dates for each day
            const daysOfWeek = ['monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday', 'sunday'];
            for (let i = 0; i < 7; i++) {
                const currentDay = new Date(fromDateValue);
                currentDay.setDate(currentDay.getDate() + i); // Set to the correct weekday date
                const formattedDate = currentDay.toISOString().split('T')[0]; // Format as yyyy-mm-dd
                document.getElementById(`${daysOfWeek[i]}-date`).textContent = formattedDate; // Update date span
            }
        }
    }

    // Function to update total hours for each row
    function updateTotalHours(row) {
        let totalMinutes = 0;

        row.querySelectorAll('input.hours-input').forEach(input => {
            const timeValue = input.value || "00:00"; // Default to "00:00" if input is empty
            const [hours, minutes] = timeValue.split(':').map(Number);
            totalMinutes += (hours * 60) + minutes;
        });

        const totalHours = (totalMinutes / 60).toFixed(2);
        row.querySelector('.total-hours').textContent = totalHours; // Display total hours in the row
    }

    // Initialize event listeners for existing inputs
    function initInputListeners(row) {
        row.querySelectorAll('input.hours-input').forEach(input => {
            input.addEventListener('input', function () {
                const timeValue = this.value;
                if (!/^\d{2}:\d{2}$/.test(timeValue)) {
                    alert("Please enter a valid time in HH:MM format.");
                    this.value = "00:00"; // Reset invalid input
                }
                updateTotalHours(this.closest('tr')); // Update total hours for the row
            });
        });

        // Ensure the total hours are calculated initially
        updateTotalHours(row);
    }

    // Call initInputListeners for the first row
    initInputListeners(document.querySelector('.timesheet-row'));

    // Function to handle adding a new row
    function addRow() {
        const newRow = document.createElement('tr');
        newRow.classList.add('timesheet-row');
        newRow.innerHTML = `
            <td contenteditable="true" class="project-input"></td>
            <td><input type="time" class="hours-input" min="00:00" max="24:00" required /></td>
            <td><input type="time" class="hours-input" min="00:00" max="24:00" required /></td>
            <td><input type="time" class="hours-input" min="00:00" max="24:00" required /></td>
            <td><input type="time" class="hours-input" min="00:00" max="24:00" required /></td>
            <td><input type="time" class="hours-input" min="00:00" max="24:00" required /></td>
            <td><input type="time" class="hours-input" min="00:00" max="24:00" required /></td>
            <td><input type="time" class="hours-input" min="00:00" max="24:00" required /></td>
            <td class="total-hours"></td>
        `;

        document.getElementById('timesheet-body').appendChild(newRow);
        initInputListeners(newRow);
    }

    function submitTimesheet() {
        const rows = document.querySelectorAll('.timesheet-table tbody tr');
        const data = [];
        const fromDate = document.querySelector('.from-date').value;
        const toDate = document.querySelector('.to-date').value;

        if (!fromDate || !toDate) {
            alert('Please select both From Date and To Date.');
            return;
        }

        let allValid = true;

        rows.forEach(row => {
            const project = row.cells[0].textContent.trim();
            if (!project) {
                alert('Project name cannot be empty.');
                allValid = false;
                return;
            }

            const hours = [];
            let rowValid = true;

            row.querySelectorAll('input.hours-input').forEach(input => {
                const timeValue = input.value || "00:00";
                const [hoursPart, minutesPart] = timeValue.split(':').map(Number);

                if (isNaN(hoursPart) || isNaN(minutesPart) || hoursPart < 0 || hoursPart > 24 || minutesPart < 0 || minutesPart >= 60) {
                    alert('Please enter valid hours and minutes (HH:MM format).');
                    rowValid = false;
                    allValid = false;
                }

                // Convert HH:MM to decimal (e.g., 03:30 -> 3.5)
                const decimalHours = hoursPart + (minutesPart / 60);
                hours.push(decimalHours);
            });

            if (rowValid) {
                const totalHours = hours.reduce((sum, current) => sum + current, 0); // Calculate total hours

                data.push({
                    Project: project,
                    FromDate: fromDate,
                    ToDate: toDate,
                    Monday: hours[0] || 0,
                    Tuesday: hours[1] || 0,
                    Wednesday: hours[2] || 0,
                    Thursday: hours[3] || 0,
                    Friday: hours[4] || 0,
                    Saturday: hours[5] || 0,
                    Sunday: hours[6] || 0,
                    TotalHours: totalHours
                });
            }
        });

        if (!allValid) {
            return;
        }

        console.log('Data to submit:', data); // Debugging line

        fetch('/Timesheet/SaveTimesheet', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(data)
        })
            .then(response => {
                if (response.status === 401) {
                    alert('Session expired. Please log in again.');
                    return;
                }
                if (!response.ok) {
                    // More detailed error logging
                    return response.json().then(err => {
                        console.error('Error response from server:', err);
                        throw new Error(`Server Error: ${response.status}`);
                    });
                }
                return response.json();
            })
            .then(result => {
                alert('Timesheet submitted successfully!');
                resetTable(); // Reset the table after successful submission
            })
            .catch(error => {
                console.error('Submission Error:', error);
                alert(`Failed to submit timesheet. Please try again. Error: ${error.message}`);
            });
    }



    // Function to reset the timesheet table
    function resetTable() {
        document.querySelectorAll('td[contenteditable="true"]').forEach(cell => {
            cell.textContent = '';
        });

        document.querySelectorAll('input.hours-input').forEach(input => {
            input.value = '';
        });

        document.querySelectorAll('.total-hours').forEach(cell => {
            cell.textContent = '';
        });

        document.querySelector('.from-date').value = '';
        document.querySelector('.to-date').value = '';

        const rows = document.querySelectorAll('.timesheet-row');
        rows.forEach((row, index) => {
            if (index > 0) row.remove();
        });
        autoFillToDateAndDays();
        const daysOfWeek = ['monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday', 'sunday'];
        daysOfWeek.forEach(day => {
            document.getElementById(`${day}-date`).textContent = ''; // Clear the date display
        });
    }

    initInputListeners(document.querySelector('.timesheet-row'));

</script>

